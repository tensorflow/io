name: API Compatibility

on:
  push:
    branches:
      - master
  schedule:
    - cron: "0 12 * * *"

env:
  BAZEL_OPTIMIZATION: --copt=-msse4.2 --copt=-mavx --compilation_mode=opt

jobs:

  macos:
    if: github.repository == 'tensorflow/io' # Don't do this in forks
    name: macOS ${{ matrix.python }} + ${{ matrix.version }}
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        python: ['3.8']
        version: ['tensorflow==2.5.0rc3:tensorflow-io-nightly', 'tf-nightly:tensorflow-io', 'tf-nightly:tensorflow-io-nightly']
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python }}
      - run: |
          set -x -e
          python -m pip install -U wheel setuptools
          python --version
      - name: Setup macOS
        run: |
          set -x -e
          bash -x -e tests/test_azure/start_azure.sh
      - name: Test macOS
        run: |
          set -x -e
          python --version
          df -h
          rm -rf tensorflow_io
          echo ${{ matrix.version }} | awk -F: '{print $1}' | xargs python -m pip install -U
          echo ${{ matrix.version }} | awk -F: '{print $2}' | xargs python -m pip install --no-deps -U
          if [[ "${{ matrix.version }}" == *"tensorflow-io-nightly"* ]]; then python -m pip install tensorflow-io-plugin-gs-nightly ; fi
          python -m pip install pytest-benchmark boto3 google-cloud-storage==1.32.0 azure-storage-blob==12.7.1
          python -m pip freeze
          python -c 'import tensorflow as tf; print(tf.version.VERSION)'
          python -c 'import tensorflow_io as tfio; print(tfio.version.VERSION)'
          python -m pytest -s -v tests/test_http.py
          python -m pytest -s -v tests/test_s3.py
          python -m pytest -s -v tests/test_azure.py
          python -m pytest -s -v tests/test_gcs.py
          python -m pytest -s -v tests/test_filesystem.py

  linux:
    if: github.repository == 'tensorflow/io' # Don't do this in forks
    name: Linux ${{ matrix.python }} + ${{ matrix.version }}
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        python: ['3.8']
        version: ['tensorflow==2.5.0rc3:tensorflow-io-nightly', 'tf-nightly:tensorflow-io', 'tf-nightly:tensorflow-io-nightly']
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python }}
      - name: Setup Linux
        run: |
          set -x -e
          bash -x -e .github/workflows/build.space.sh
          bash -x -e tests/test_aws/aws_test.sh
          bash -x -e tests/test_azure/start_azure.sh
          bash -x -e tests/test_gcloud/test_gcs.sh gcs-emulator
      - name: Test Linux
        run: |
          set -x -e
          python --version
          df -h
          rm -rf tensorflow_io
          echo ${{ matrix.version }} | awk -F: '{print $1}' | xargs python -m pip install -U
          echo ${{ matrix.version }} | awk -F: '{print $2}' | xargs python -m pip install --no-deps -U
          if [[ "${{ matrix.version }}" == *"tensorflow-io-nightly"* ]]; then python -m pip install tensorflow-io-plugin-gs-nightly ; fi
          python -m pip install pytest-benchmark boto3 google-cloud-storage==1.32.0 azure-storage-blob==12.7.1
          python -m pip freeze
          python -c 'import tensorflow as tf; print(tf.version.VERSION)'
          python -c 'import tensorflow_io as tfio; print(tfio.version.VERSION)'
          python -m pytest -s -v tests/test_http.py
          python -m pytest -s -v tests/test_s3.py
          python -m pytest -s -v tests/test_azure.py
          if [[ "${{ matrix.version }}" != "tf-nightly:tensorflow-io" ]]; then python -m pytest -s -v tests/test_gcs.py ; fi
          python -m pytest -s -v tests/test_filesystem.py

  windows:
    if: github.repository == 'tensorflow/io' # Don't do this in forks
    name: Windows ${{ matrix.python }} + ${{ matrix.version }}
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        python: ['3.8']
        version: ['tensorflow==2.5.0rc3:tensorflow-io-nightly', 'tf-nightly:tensorflow-io', 'tf-nightly:tensorflow-io-nightly']
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python }}
      - uses: actions/setup-node@v1
        with:
          node-version: '8.x'
      - name: Setup Windows
        shell: cmd
        run: |
          @echo on
          bash -x -e tests/test_azure/start_azure.sh
      - name: Test Windows
        shell: cmd
        run: |
          @echo on
          python --version
          rm -rf tensorflow_io
          echo ${{ matrix.version }} | awk -F: '{print $1}' | xargs python -m pip install -U
          echo ${{ matrix.version }} | awk -F: '{print $2}' | xargs python -m pip install --no-deps -U
          if [[ "${{ matrix.version }}" == *"tensorflow-io-nightly"* ]]; then python -m pip install tensorflow-io-plugin-gs-nightly ; fi
          python -m pip install pytest-benchmark
          python -m pip freeze
          python -c 'import tensorflow as tf; print(tf.version.VERSION)'
          python -c 'import tensorflow_io as tfio; print(tfio.version.VERSION)'
          python -m pytest -s -v tests/test_http.py -k remote
