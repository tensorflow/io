dist: bionic
language: generic

git:
  quiet: true

services:
- docker

addons:
  apt:
    packages:
    - python-pip

before_install:
- if [[ $(uname) == "Darwin" ]]; then nvm install 8 ; fi
- |
  set -x -e ;
  if [[ $(uname) == "Darwin" ]]; then
    export PYVER=$(echo $TRAVIS_JOB_NAME | awk '{print $NF}') ;
    echo pyenv install --list ;
    pyenv install $PYVER ;
    pyenv global $PYVER ;
    export PATH=$(dirname $(pyenv which python)):$PATH ;
    echo $PATH ;
    python --version ;
    python -c "import site; print(site.getsitepackages())" ;
    python -m pip install --user -U twine delocate ;
    delocate-wheel --version ;
  else
    python -m pip install --user -U twine ;
  fi
- twine --version
- export TENSORFLOW_INSTALL="$(python setup.py --package-version)"

cache:
  directories:
  - .cache/bazel

install:
- export BAZEL_CACHE=.cache/bazel/$(echo $TRAVIS_JOB_NAME | awk '{print $1}')
- echo $BAZEL_CACHE
- |
  if [[ $(uname) == "Darwin" ]]; then
    bash -x -e tests/test_ignite/start_ignite.sh ;
    bash -x -e tests/test_kafka/kafka_test.sh start kafka ;
    bash -x -e tests/test_azure/start_azure.sh ;
    bash -x -e tests/test_dicom/dicom_samples.sh download ;
    bash -x -e tests/test_dicom/dicom_samples.sh extract ;
  fi

stages:
- build

jobs:
  include:
  - stage: build
    name: Lint Bazel
    script: bash -x -e .travis/lint.bazel.sh

  - stage: build
    name: Lint Python
    script: docker run -i -t --rm -v $PWD:/v -w /v --net=host buildpack-deps:14.04 bash -x -e .travis/lint.python.sh

  # Preview Release Builds are for TensorFlow 2.0 Preview release.
  # Note only Linux (Ubuntu 18.04) and macOS are supported.
  - stage: build
    name: "Ubuntu14.04 TensorFlow 2.0 Preview Release Build Python"
    script:
    - echo docker run -i -t --rm -v $PWD:/v -w /v -e BAZEL_CACHE=${BAZEL_CACHE} --net=host buildpack-deps:14.04 bash -x -e .travis/python.release.sh tensorflow==2.0.0b1 --preview ${TRAVIS_BUILD_NUMBER} python python3.4 python3.5 python3.6
    - echo "Skip test for now, will fix later"
    after_success: pwd ; ls -la .travis ; bash -x -e .travis/after-success-tf20.sh

  - stage: build
    name: "Ubuntu16.04 TensorFlow 2.0 Preview Release Build Python 3.7"
    script:
    - echo docker run -i -t --rm -v $PWD:/v -w /v -e BAZEL_CACHE=${BAZEL_CACHE} --net=host ubuntu:16.04 bash -x -e .travis/python3.7+.release.sh python3.7 tensorflow==2.0.0b1 --preview ${TRAVIS_BUILD_NUMBER}
    - echo "Skip test for now, will fix later"
    after_success: bash -x -e .travis/after-success-tf20.sh

  - stage: build
    name: "macOS TensorFlow 2.0 Preview Release Build Python 2.7.13"
    os: osx
    osx_image: xcode9
    script:
    - BAZEL_CACHE=${BAZEL_CACHE} bash -x -e .travis/python.release.sh tensorflow==2.0.0b1 --preview ${TRAVIS_BUILD_NUMBER} python
    - bash -x -e .travis/wheel.test.sh
    after_success: bash -x -e .travis/after-success-tf20.sh

  # Release Builds are for nightly release.
  # Note Python 2.7, 3.4, 3.5, 3.6, 3.7 are supported on Linux
  # for Ubuntu 14.04/16.04/18.04, and Python 2.7 for macOS.
  - stage: build
    name: "Ubuntu14.04 Nightly Release Build Python"
    script:
    - echo docker run -i -t --rm -v $PWD:/v -w /v -e BAZEL_CACHE=${BAZEL_CACHE} --net=host buildpack-deps:14.04 bash -x -e .travis/python.release.sh "${TENSORFLOW_INSTALL}" --nightly ${TRAVIS_BUILD_NUMBER} python python3 python3.5 python3.6
    - echo "Skip test for nightly build, as it has been covered in install build"
    after_success: bash -x -e .travis/after-success.sh

  - stage: build
    name: "Ubuntu16.04 Nightly Release Build Python 3.7"
    script:
    - echo docker run -i -t --rm -v $PWD:/v -w /v -e BAZEL_CACHE=${BAZEL_CACHE} --net=host ubuntu:16.04 bash -x -e .travis/python3.7+.release.sh python3.7 "${TENSORFLOW_INSTALL}" --nightly ${TRAVIS_BUILD_NUMBER}
    - echo "Skip test for now, will fix later"
    after_success: bash -x -e .travis/after-success.sh

  - stage: build
    name: "macOS Nightly Release Build Python 2.7.13"
    os: osx
    osx_image: xcode9
    script:
    - BAZEL_CACHE=${BAZEL_CACHE} bash -x -e .travis/python.release.sh "${TENSORFLOW_INSTALL}" --nightly ${TRAVIS_BUILD_NUMBER} python
    - bash -x -e .travis/wheel.test.sh
    after_success: bash -x -e .travis/after-success.sh
    
  - stage: build
    name: "macOS Nightly Release Build Python 3.5.3"
    os: osx
    osx_image: xcode9
    script:
    - BAZEL_CACHE=${BAZEL_CACHE} bash -x -e .travis/python.release.sh "${TENSORFLOW_INSTALL}" --nightly ${TRAVIS_BUILD_NUMBER} python
    - bash -x -e .travis/wheel.test.sh
    after_success: bash -x -e .travis/after-success.sh

  - stage: build
    name: "macOS Nightly Release Build Python 3.6.2"
    os: osx
    osx_image: xcode9
    script:
    - BAZEL_CACHE=${BAZEL_CACHE} bash -x -e .travis/python.release.sh "${TENSORFLOW_INSTALL}" --nightly ${TRAVIS_BUILD_NUMBER} python
    - bash -x -e .travis/wheel.test.sh
    after_success: bash -x -e .travis/after-success.sh

notifications:
- email: false
